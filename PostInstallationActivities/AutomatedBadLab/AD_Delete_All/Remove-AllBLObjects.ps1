# Deletes all objects created by AutomatedBadLab - useful for debugging

# Suppress all errors
$ErrorActionPreference = 'SilentlyContinue'

# Get all AutomatedBadLab generated users and delete
$ADUsers = Get-ADUser -Filter * -Properties Description
$BLUserDesc = "User generated by AutomatedBadLab"
$BLPassDesc = "Just so I dont forget my password is:"

$counter = 0
foreach ($User in $ADUsers)
{
    # Delete users with plaintext passwords in description field or users with AutomatedBadLab description
    If ($User.description -contains $BLPassDesc -or $User.description -contains $BLUserDesc) 
    {
        $counter++
        Write-Progress -Activity "Deleting AutomatedBadLab Users.." -CurrentOperation $User.Name -PercentComplete (($counter / $ADUsers.count) * 100)
        Remove-ADUser -Identity $User -Confirm:$False
    }
}

# To close the progress bar at the end
Write-Progress -Activity "Deleting AutomatedBadLab Users.." -Completed

# Get all AutomatedBadLab generated computers and delete
$ADComputers = Get-ADComputer -Filter * -Properties Description

$counter = 0
foreach ($Computer in $ADComputers)
{
    # Delete computers with AutomatedBadLab description
    If ($Computer.description -like '*AutomatedBadLab*') 
    {
        $counter++
        Write-Progress -Activity "Deleting AutomatedBadLab Computers.." -CurrentOperation $Computer.Name -PercentComplete (($counter / $ADComputers.count) * 100)
        Remove-ADComputer -Identity $Computer -Confirm:$False
    }
    Else # Move them back into default container in case they had moved to LAPS OU
    {
        Move-ADObject -Identity $Computer.DistinguishedName -TargetPath $(Get-ADDomain).ComputersContainer
    }
}

# To close the progress bar at the end
Write-Progress -Activity "Deleting AutomatedBadLab Computers.." -Completed

# Get all AutomatedBadLab generated groups and delete
$ADGroups = Get-ADGroup -Filter * -Properties Description
$BLGroupDesc = "Group generated by AutomatedBadLab"

$counter = 0
foreach ($Group in $ADGroups)
{
    If ($($Group.Description) -contains $BLGroupDesc) 
    {
        $counter++
        Write-Progress -Activity "Deleting AutomatedBadLab Groups.." -CurrentOperation $Group.Name -PercentComplete (($counter / $ADGroups.count) * 100)
        Remove-ADGroup -Identity $Group -Confirm:$False
    }
}

# To close the progress bar at the end
Write-Progress -Activity "Deleting AutomatedBadLab Groups.." -Completed

# Remove all AutomatedBadLab generated service accounts
foreach ($ServiceAccount in Get-ADServiceAccount -Filter *) {
    Remove-ADServiceAccount -Identity $ServiceAccount -Confirm:$false
}

# Remove all AutomatedBadLab generated OUs and their child objects
$TopLevelOUs = @('Admin', 'Tier 1', 'Tier 2', 'Stage', 'Quarantine', 'Grouper-Groups', 'People', 'Testing', `
                'Locations', 'Business Units', 'Projects', 'LAPS Computers')

function Remove-ADObjectRecursively {
    param(
        [Parameter(Mandatory=$true)]
        [string]$DistinguishedName
    )

    # Unlock the current AD object
    Set-ADObject -Identity $DistinguishedName -ProtectedFromAccidentalDeletion $false

    # Retrieve all child objects of the given object
    $childObjects = Get-ADObject -Filter * -SearchBase $DistinguishedName -SearchScope OneLevel
    foreach ($childObject in $childObjects) {
        # Skip the parent object
        if ($childObject.DistinguishedName -ne $DistinguishedName) {
            # Unlock the child object
            $childObject | Set-ADObject -ProtectedFromAccidentalDeletion $false
            
            # Recursively delete child objects
            Remove-ADObjectRecursively -DistinguishedName $childObject.DistinguishedName
        }
    }

    # Delete the object itself
    Remove-ADObject -Identity $DistinguishedName -Confirm:$false 
}

$counter = 0
foreach ($OU in $TopLevelOUs) {
    $OUPath = "OU=$OU,$((Get-ADDomain).distinguishedname)"
     
    # Recursively delete child objects and then the OU
    Remove-ADObjectRecursively -DistinguishedName $OUPath
    
    # Update progress
    $counter++
    Write-Progress -Activity "Deleting OUs and Child Objects.." -CurrentOperation $OU -PercentComplete (($counter / $TopLevelOUs.count) * 100)
}

# To close the progress bar at the end
Write-Progress -Activity "Deleting OUs and Child Objects.." -Completed

# Remove GPOs
Remove-GPO -Name "KerberosEncryptionGPO"
Remove-GPO -Name "LAPS Policy GPO" 

# Cleanup all ADCS Objects
$CertAuthority = (Get-LabVM -Role CaRoot)

Invoke-LabCommand -ComputerName $CertAuthority -ActivityName "Remove ESC Certificate Templates" -ScriptBlock {
    $CAObjects = Get-ADObject -Filter * -SearchBase "CN=Public Key Services,CN=Services,CN=Configuration,$((Get-ADRootDSE).defaultNamingContext)" -SearchScope 2 | Where-Object name -like "*ESC*"

    # Remove the CA AD Object as well as the CA Template
    foreach ($CAObject in $CAObjects) {
        Remove-ADObject -Identity $CAObject.DistinguishedName -Confirm:$False
        Remove-CATemplate -Name $CAObject.Name -Force -Confirm:$False
    }
}