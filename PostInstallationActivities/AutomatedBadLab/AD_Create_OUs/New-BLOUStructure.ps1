function New-BLOUStructure {

    Write-Host "[+] Creating Tiered Organisation Unit Structure.." -ForegroundColor Green
    
    $3LetterCodeCSV = Join-Path $PSScriptRoot '3lettercodes.csv'

    $TopLevelOUs = @('Admin', 'Tier 1', 'Tier 2', 'Stage', 'Quarantine', 'Grouper-Groups', 'People', 'Testing', 'Locations', 'Business Units', 'Projects')
    $AdminSubOUs = @('Tier 0', 'Tier 1', 'Tier 2', 'Staging')
    $AdminobjectOUs = @('Accounts', 'Servers', 'Devices', 'Permissions', 'Roles')
    $ObjectSubOUs = @('ServiceAccounts', 'Groups', 'Devices', 'Test')

    $Locations = @('North America', 'Europe', 'Asia', 'South America')
    $BusinessUnits = @('Sales', 'IT', 'Finance', 'HR')
    $Projects = @('Project Alpha', 'Project Beta')

    $Description = "OU generated by AutomatedBadLab"

    $dn = (Get-ADDomain).distinguishedname

    $counter = 0

    # Create Top Level OUs
    foreach ($name in $TopLevelOUs) {
        New-ADOrganizationalUnit -Name $Name -Description $Description -ProtectedFromAccidentalDeletion $False
        $fulldn = "OU=$name,$dn"

        # Update progress
        $counter++
        Write-Progress -Activity "Creating OUs and Child Objects.." -CurrentOperation $name -PercentComplete (($counter / $TopLevelOUs.count) * 100)

        # Create Sub OUs for Admin
        if ($name -eq 'Admin') {
            foreach ($adminsubou in $AdminSubOUs) {
                New-ADOrganizationalUnit -Name $adminsubou -Path $fulldn -Description $Description
                $adminsubfulldn = "OU=$adminsubou,$fulldn"

                if ($adminsubou -ne 'Staging') {
                    foreach ($AdminobjectOU in $AdminobjectOUs) {
                        $adminOUPrefix = switch ($adminsubou) {
                            'Tier 0' { "T0-" }
                            'Tier 1' { "T1-" }
                            'Tier 2' { "T2-" }
                        }
                        $adminobjectoucombo = $adminOUPrefix + $adminobjectou
                        New-ADOrganizationalUnit -Name $adminobjectoucombo -Path $adminsubfulldn -Description $Description
                    }
                }
            }
        }
        # Add complexity: Locations
        elseif ($name -eq 'Locations') {
            foreach ($location in $Locations) {
                New-ADOrganizationalUnit -Name $location -Path $fulldn -Description $Description
            }
        }
        # Add complexity: Business Units
        elseif ($name -eq 'Business Units') {
            foreach ($unit in $BusinessUnits) {
                New-ADOrganizationalUnit -Name $unit -Path $fulldn -Description $Description
            }
        }
        # Add complexity: Projects
        elseif ($name -eq 'Projects') {
            foreach ($project in $Projects) {
                New-ADOrganizationalUnit -Name $project -Path $fulldn -Description $Description
            }
        }
        # Existing logic
        elseif (($name -eq 'Tier 1') -or ($name -eq 'Tier 2') -or ($name -eq 'Stage')) {
            $csvlist = import-csv $3LetterCodeCSV

            foreach ($ou in $csvlist) {
                New-ADOrganizationalUnit -Name ($ou.name) -Path $fulldn -Description "$($ou.description) - $Description"
                $csvdn = "OU=$($ou.name),$fulldn"
                
                foreach ($ObjectSubOU in $ObjectSubOUs) {
                    New-ADOrganizationalUnit -Name $ObjectSubOU -Path $csvdn -Description $Description
                }
            }
        }
        elseif ($name -eq 'People') {
            $csvlist = import-csv $3LetterCodeCSV

            foreach ($ou in $csvlist) {
                New-ADOrganizationalUnit -Name ($ou.name) -Path $fulldn -Description "$($ou.description) - $Description"
            }
            
            New-ADOrganizationalUnit -Name 'Deprovisioned' -Path $fulldn -Description "User account that have been deprovisioned by the IDM System - $Description"
            New-ADOrganizationalUnit -Name 'Unassociated' -Path $fulldn -Description "User Object that do have have any department affliation - $Description"
        }
    }
    # To close the progress bar at the end
    Write-Progress -Activity "Creating OUs and Child Objects.." -Completed
}